Three Principal App Layers:
Presentation - Provision of services, display of information
Domain - Logic that is the real point of the system
Data Source - Communication with databases, messaging systems, transaction managers

Domain logic organizing ways:
Transaction Scripts, Table Module,  Domain Model

DB mapping patterns:  
Row Data Gateway(each record is read into an object with a clear and explicit interface),
Table Data Gateway(table is read into an object, interface that relies on accessing a record set structure)

View Patterns:  Transform View , Template View, and Two Step View
Template View 
allows you write the presentation in the structure of the page and embed markers into the page to indicate
where dynamic content needs to go. 
The Transform View uses a transform style of program. 
If you use procedural scripts as your view, you can write the code in the style of either Transform View or Template View
The advantage of the Two Step View is that it puts the decision of what HTML to use in a single place.
This makes global changes to the HTML easy since there's only one object to alter in order to alter every
screen on the site. 

Statelessness in a distributed enterprise application
When people refer to a stateless server they mean an object that doesn't retain state
between requests.

Ways to Store Session State:
Client Session State - stores the data on the client. There are several ways to do this: encoding data in a
URL for a Web presentation, using cookies, serializing the data into some hidden field on a Web form, and
holding the data in objects on a rich client.
Server Session State - may be as simple as holding the data in memory between requests. Usually,
however, there's a mechanism for storing the session state somewhere more durable as a serialized object. The
object can be stored on the application server's local file system, or it can be placed in a shared data source.
This could be a simple database table with a session ID as a key and a serialized object as a value.
Database Session State - is also server-side storage, but it involves breaking up the data into tables and
fields and storing it in the database much as you would store more lasting data.


*ACID - atomicity, consistency, isolation, and durability